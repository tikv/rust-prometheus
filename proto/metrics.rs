// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `metrics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.LabelPair)
pub struct LabelPair {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.LabelPair.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:io.prometheus.client.LabelPair.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.LabelPair.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LabelPair {
    fn default() -> &'a LabelPair {
        <LabelPair as ::protobuf::Message>::default_instance()
    }
}

impl LabelPair {
    pub fn new() -> LabelPair {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &LabelPair| { &m.name },
            |m: &mut LabelPair| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &LabelPair| { &m.value },
            |m: &mut LabelPair| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LabelPair>(
            "LabelPair",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LabelPair {
    const NAME: &'static str = "LabelPair";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LabelPair {
        LabelPair::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LabelPair {
        static instance: LabelPair = LabelPair {
            name: ::std::string::String::new(),
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LabelPair {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LabelPair").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LabelPair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LabelPair {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.Gauge)
pub struct Gauge {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.Gauge.value)
    pub value: f64,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.Gauge.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Gauge {
    fn default() -> &'a Gauge {
        <Gauge as ::protobuf::Message>::default_instance()
    }
}

impl Gauge {
    pub fn new() -> Gauge {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Gauge| { &m.value },
            |m: &mut Gauge| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Gauge>(
            "Gauge",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Gauge {
    const NAME: &'static str = "Gauge";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.value = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Gauge {
        Gauge::new()
    }

    fn clear(&mut self) {
        self.value = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Gauge {
        static instance: Gauge = Gauge {
            value: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Gauge {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Gauge").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Gauge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gauge {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.Counter)
pub struct Counter {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.Counter.value)
    pub value: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Counter.exemplar)
    pub exemplar: ::protobuf::MessageField<Exemplar>,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.Counter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Counter {
    fn default() -> &'a Counter {
        <Counter as ::protobuf::Message>::default_instance()
    }
}

impl Counter {
    pub fn new() -> Counter {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Counter| { &m.value },
            |m: &mut Counter| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Exemplar>(
            "exemplar",
            |m: &Counter| { &m.exemplar },
            |m: &mut Counter| { &mut m.exemplar },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Counter>(
            "Counter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Counter {
    const NAME: &'static str = "Counter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.value = is.read_double()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.exemplar)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.exemplar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        if let Some(v) = self.exemplar.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Counter {
        Counter::new()
    }

    fn clear(&mut self) {
        self.value = 0.;
        self.exemplar.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Counter {
        static instance: Counter = Counter {
            value: 0.,
            exemplar: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Counter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Counter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Counter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Counter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.Quantile)
pub struct Quantile {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.Quantile.quantile)
    pub quantile: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Quantile.value)
    pub value: f64,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.Quantile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Quantile {
    fn default() -> &'a Quantile {
        <Quantile as ::protobuf::Message>::default_instance()
    }
}

impl Quantile {
    pub fn new() -> Quantile {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quantile",
            |m: &Quantile| { &m.quantile },
            |m: &mut Quantile| { &mut m.quantile },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Quantile| { &m.value },
            |m: &mut Quantile| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Quantile>(
            "Quantile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Quantile {
    const NAME: &'static str = "Quantile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.quantile = is.read_double()?;
                },
                17 => {
                    self.value = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.quantile != 0. {
            my_size += 1 + 8;
        }
        if self.value != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.quantile != 0. {
            os.write_double(1, self.quantile)?;
        }
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Quantile {
        Quantile::new()
    }

    fn clear(&mut self) {
        self.quantile = 0.;
        self.value = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Quantile {
        static instance: Quantile = Quantile {
            quantile: 0.,
            value: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Quantile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Quantile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Quantile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Quantile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.Summary)
pub struct Summary {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.Summary.sample_count)
    pub sample_count: u64,
    // @@protoc_insertion_point(field:io.prometheus.client.Summary.sample_sum)
    pub sample_sum: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Summary.quantile)
    pub quantile: ::std::vec::Vec<Quantile>,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.Summary.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Summary {
    fn default() -> &'a Summary {
        <Summary as ::protobuf::Message>::default_instance()
    }
}

impl Summary {
    pub fn new() -> Summary {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sample_count",
            |m: &Summary| { &m.sample_count },
            |m: &mut Summary| { &mut m.sample_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sample_sum",
            |m: &Summary| { &m.sample_sum },
            |m: &mut Summary| { &mut m.sample_sum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "quantile",
            |m: &Summary| { &m.quantile },
            |m: &mut Summary| { &mut m.quantile },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Summary>(
            "Summary",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Summary {
    const NAME: &'static str = "Summary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sample_count = is.read_uint64()?;
                },
                17 => {
                    self.sample_sum = is.read_double()?;
                },
                26 => {
                    self.quantile.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sample_count != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.sample_count);
        }
        if self.sample_sum != 0. {
            my_size += 1 + 8;
        }
        for value in &self.quantile {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sample_count != 0 {
            os.write_uint64(1, self.sample_count)?;
        }
        if self.sample_sum != 0. {
            os.write_double(2, self.sample_sum)?;
        }
        for v in &self.quantile {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Summary {
        Summary::new()
    }

    fn clear(&mut self) {
        self.sample_count = 0;
        self.sample_sum = 0.;
        self.quantile.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Summary {
        static instance: Summary = Summary {
            sample_count: 0,
            sample_sum: 0.,
            quantile: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Summary {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Summary").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Summary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Summary {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.Untyped)
pub struct Untyped {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.Untyped.value)
    pub value: f64,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.Untyped.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Untyped {
    fn default() -> &'a Untyped {
        <Untyped as ::protobuf::Message>::default_instance()
    }
}

impl Untyped {
    pub fn new() -> Untyped {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Untyped| { &m.value },
            |m: &mut Untyped| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Untyped>(
            "Untyped",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Untyped {
    const NAME: &'static str = "Untyped";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.value = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Untyped {
        Untyped::new()
    }

    fn clear(&mut self) {
        self.value = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Untyped {
        static instance: Untyped = Untyped {
            value: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Untyped {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Untyped").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Untyped {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Untyped {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.Histogram)
pub struct Histogram {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.sample_count)
    pub sample_count: u64,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.sample_count_float)
    pub sample_count_float: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.sample_sum)
    pub sample_sum: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.bucket)
    pub bucket: ::std::vec::Vec<Bucket>,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.schema)
    pub schema: i32,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.zero_threshold)
    pub zero_threshold: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.zero_count)
    pub zero_count: u64,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.zero_count_float)
    pub zero_count_float: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.negative_span)
    pub negative_span: ::std::vec::Vec<BucketSpan>,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.negative_delta)
    pub negative_delta: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.negative_count)
    pub negative_count: ::std::vec::Vec<f64>,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.positive_span)
    pub positive_span: ::std::vec::Vec<BucketSpan>,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.positive_delta)
    pub positive_delta: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:io.prometheus.client.Histogram.positive_count)
    pub positive_count: ::std::vec::Vec<f64>,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.Histogram.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Histogram {
    fn default() -> &'a Histogram {
        <Histogram as ::protobuf::Message>::default_instance()
    }
}

impl Histogram {
    pub fn new() -> Histogram {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sample_count",
            |m: &Histogram| { &m.sample_count },
            |m: &mut Histogram| { &mut m.sample_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sample_count_float",
            |m: &Histogram| { &m.sample_count_float },
            |m: &mut Histogram| { &mut m.sample_count_float },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sample_sum",
            |m: &Histogram| { &m.sample_sum },
            |m: &mut Histogram| { &mut m.sample_sum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "bucket",
            |m: &Histogram| { &m.bucket },
            |m: &mut Histogram| { &mut m.bucket },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "schema",
            |m: &Histogram| { &m.schema },
            |m: &mut Histogram| { &mut m.schema },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "zero_threshold",
            |m: &Histogram| { &m.zero_threshold },
            |m: &mut Histogram| { &mut m.zero_threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "zero_count",
            |m: &Histogram| { &m.zero_count },
            |m: &mut Histogram| { &mut m.zero_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "zero_count_float",
            |m: &Histogram| { &m.zero_count_float },
            |m: &mut Histogram| { &mut m.zero_count_float },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "negative_span",
            |m: &Histogram| { &m.negative_span },
            |m: &mut Histogram| { &mut m.negative_span },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "negative_delta",
            |m: &Histogram| { &m.negative_delta },
            |m: &mut Histogram| { &mut m.negative_delta },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "negative_count",
            |m: &Histogram| { &m.negative_count },
            |m: &mut Histogram| { &mut m.negative_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "positive_span",
            |m: &Histogram| { &m.positive_span },
            |m: &mut Histogram| { &mut m.positive_span },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "positive_delta",
            |m: &Histogram| { &m.positive_delta },
            |m: &mut Histogram| { &mut m.positive_delta },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "positive_count",
            |m: &Histogram| { &m.positive_count },
            |m: &mut Histogram| { &mut m.positive_count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Histogram>(
            "Histogram",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Histogram {
    const NAME: &'static str = "Histogram";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sample_count = is.read_uint64()?;
                },
                33 => {
                    self.sample_count_float = is.read_double()?;
                },
                17 => {
                    self.sample_sum = is.read_double()?;
                },
                26 => {
                    self.bucket.push(is.read_message()?);
                },
                40 => {
                    self.schema = is.read_sint32()?;
                },
                49 => {
                    self.zero_threshold = is.read_double()?;
                },
                56 => {
                    self.zero_count = is.read_uint64()?;
                },
                65 => {
                    self.zero_count_float = is.read_double()?;
                },
                74 => {
                    self.negative_span.push(is.read_message()?);
                },
                82 => {
                    is.read_repeated_packed_sint64_into(&mut self.negative_delta)?;
                },
                80 => {
                    self.negative_delta.push(is.read_sint64()?);
                },
                90 => {
                    is.read_repeated_packed_double_into(&mut self.negative_count)?;
                },
                89 => {
                    self.negative_count.push(is.read_double()?);
                },
                98 => {
                    self.positive_span.push(is.read_message()?);
                },
                106 => {
                    is.read_repeated_packed_sint64_into(&mut self.positive_delta)?;
                },
                104 => {
                    self.positive_delta.push(is.read_sint64()?);
                },
                114 => {
                    is.read_repeated_packed_double_into(&mut self.positive_count)?;
                },
                113 => {
                    self.positive_count.push(is.read_double()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sample_count != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.sample_count);
        }
        if self.sample_count_float != 0. {
            my_size += 1 + 8;
        }
        if self.sample_sum != 0. {
            my_size += 1 + 8;
        }
        for value in &self.bucket {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.schema != 0 {
            my_size += ::protobuf::rt::sint32_size(5, self.schema);
        }
        if self.zero_threshold != 0. {
            my_size += 1 + 8;
        }
        if self.zero_count != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.zero_count);
        }
        if self.zero_count_float != 0. {
            my_size += 1 + 8;
        }
        for value in &self.negative_span {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.negative_delta {
            my_size += ::protobuf::rt::sint64_size(10, *value);
        };
        my_size += 9 * self.negative_count.len() as u64;
        for value in &self.positive_span {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.positive_delta {
            my_size += ::protobuf::rt::sint64_size(13, *value);
        };
        my_size += 9 * self.positive_count.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sample_count != 0 {
            os.write_uint64(1, self.sample_count)?;
        }
        if self.sample_count_float != 0. {
            os.write_double(4, self.sample_count_float)?;
        }
        if self.sample_sum != 0. {
            os.write_double(2, self.sample_sum)?;
        }
        for v in &self.bucket {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.schema != 0 {
            os.write_sint32(5, self.schema)?;
        }
        if self.zero_threshold != 0. {
            os.write_double(6, self.zero_threshold)?;
        }
        if self.zero_count != 0 {
            os.write_uint64(7, self.zero_count)?;
        }
        if self.zero_count_float != 0. {
            os.write_double(8, self.zero_count_float)?;
        }
        for v in &self.negative_span {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        for v in &self.negative_delta {
            os.write_sint64(10, *v)?;
        };
        for v in &self.negative_count {
            os.write_double(11, *v)?;
        };
        for v in &self.positive_span {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.positive_delta {
            os.write_sint64(13, *v)?;
        };
        for v in &self.positive_count {
            os.write_double(14, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Histogram {
        Histogram::new()
    }

    fn clear(&mut self) {
        self.sample_count = 0;
        self.sample_count_float = 0.;
        self.sample_sum = 0.;
        self.bucket.clear();
        self.schema = 0;
        self.zero_threshold = 0.;
        self.zero_count = 0;
        self.zero_count_float = 0.;
        self.negative_span.clear();
        self.negative_delta.clear();
        self.negative_count.clear();
        self.positive_span.clear();
        self.positive_delta.clear();
        self.positive_count.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Histogram {
        static instance: Histogram = Histogram {
            sample_count: 0,
            sample_count_float: 0.,
            sample_sum: 0.,
            bucket: ::std::vec::Vec::new(),
            schema: 0,
            zero_threshold: 0.,
            zero_count: 0,
            zero_count_float: 0.,
            negative_span: ::std::vec::Vec::new(),
            negative_delta: ::std::vec::Vec::new(),
            negative_count: ::std::vec::Vec::new(),
            positive_span: ::std::vec::Vec::new(),
            positive_delta: ::std::vec::Vec::new(),
            positive_count: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Histogram {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Histogram").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Histogram {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Histogram {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.Bucket)
pub struct Bucket {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.Bucket.cumulative_count)
    pub cumulative_count: u64,
    // @@protoc_insertion_point(field:io.prometheus.client.Bucket.cumulative_count_float)
    pub cumulative_count_float: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Bucket.upper_bound)
    pub upper_bound: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Bucket.exemplar)
    pub exemplar: ::protobuf::MessageField<Exemplar>,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.Bucket.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Bucket {
    fn default() -> &'a Bucket {
        <Bucket as ::protobuf::Message>::default_instance()
    }
}

impl Bucket {
    pub fn new() -> Bucket {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cumulative_count",
            |m: &Bucket| { &m.cumulative_count },
            |m: &mut Bucket| { &mut m.cumulative_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cumulative_count_float",
            |m: &Bucket| { &m.cumulative_count_float },
            |m: &mut Bucket| { &mut m.cumulative_count_float },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "upper_bound",
            |m: &Bucket| { &m.upper_bound },
            |m: &mut Bucket| { &mut m.upper_bound },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Exemplar>(
            "exemplar",
            |m: &Bucket| { &m.exemplar },
            |m: &mut Bucket| { &mut m.exemplar },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Bucket>(
            "Bucket",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Bucket {
    const NAME: &'static str = "Bucket";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cumulative_count = is.read_uint64()?;
                },
                33 => {
                    self.cumulative_count_float = is.read_double()?;
                },
                17 => {
                    self.upper_bound = is.read_double()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.exemplar)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.cumulative_count != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.cumulative_count);
        }
        if self.cumulative_count_float != 0. {
            my_size += 1 + 8;
        }
        if self.upper_bound != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.exemplar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.cumulative_count != 0 {
            os.write_uint64(1, self.cumulative_count)?;
        }
        if self.cumulative_count_float != 0. {
            os.write_double(4, self.cumulative_count_float)?;
        }
        if self.upper_bound != 0. {
            os.write_double(2, self.upper_bound)?;
        }
        if let Some(v) = self.exemplar.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Bucket {
        Bucket::new()
    }

    fn clear(&mut self) {
        self.cumulative_count = 0;
        self.cumulative_count_float = 0.;
        self.upper_bound = 0.;
        self.exemplar.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Bucket {
        static instance: Bucket = Bucket {
            cumulative_count: 0,
            cumulative_count_float: 0.,
            upper_bound: 0.,
            exemplar: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Bucket {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Bucket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Bucket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bucket {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.BucketSpan)
pub struct BucketSpan {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.BucketSpan.offset)
    pub offset: i32,
    // @@protoc_insertion_point(field:io.prometheus.client.BucketSpan.length)
    pub length: u32,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.BucketSpan.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BucketSpan {
    fn default() -> &'a BucketSpan {
        <BucketSpan as ::protobuf::Message>::default_instance()
    }
}

impl BucketSpan {
    pub fn new() -> BucketSpan {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &BucketSpan| { &m.offset },
            |m: &mut BucketSpan| { &mut m.offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &BucketSpan| { &m.length },
            |m: &mut BucketSpan| { &mut m.length },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BucketSpan>(
            "BucketSpan",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BucketSpan {
    const NAME: &'static str = "BucketSpan";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.offset = is.read_sint32()?;
                },
                16 => {
                    self.length = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.offset != 0 {
            my_size += ::protobuf::rt::sint32_size(1, self.offset);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.length);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.offset != 0 {
            os.write_sint32(1, self.offset)?;
        }
        if self.length != 0 {
            os.write_uint32(2, self.length)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BucketSpan {
        BucketSpan::new()
    }

    fn clear(&mut self) {
        self.offset = 0;
        self.length = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BucketSpan {
        static instance: BucketSpan = BucketSpan {
            offset: 0,
            length: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BucketSpan {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BucketSpan").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BucketSpan {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BucketSpan {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.Exemplar)
pub struct Exemplar {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.Exemplar.label)
    pub label: ::std::vec::Vec<LabelPair>,
    // @@protoc_insertion_point(field:io.prometheus.client.Exemplar.value)
    pub value: f64,
    // @@protoc_insertion_point(field:io.prometheus.client.Exemplar.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.Exemplar.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Exemplar {
    fn default() -> &'a Exemplar {
        <Exemplar as ::protobuf::Message>::default_instance()
    }
}

impl Exemplar {
    pub fn new() -> Exemplar {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "label",
            |m: &Exemplar| { &m.label },
            |m: &mut Exemplar| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Exemplar| { &m.value },
            |m: &mut Exemplar| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &Exemplar| { &m.timestamp },
            |m: &mut Exemplar| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Exemplar>(
            "Exemplar",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Exemplar {
    const NAME: &'static str = "Exemplar";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.label.push(is.read_message()?);
                },
                17 => {
                    self.value = is.read_double()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.label {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.value != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.label {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Exemplar {
        Exemplar::new()
    }

    fn clear(&mut self) {
        self.label.clear();
        self.value = 0.;
        self.timestamp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Exemplar {
        static instance: Exemplar = Exemplar {
            label: ::std::vec::Vec::new(),
            value: 0.,
            timestamp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Exemplar {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Exemplar").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Exemplar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Exemplar {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.Metric)
pub struct Metric {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.Metric.label)
    pub label: ::std::vec::Vec<LabelPair>,
    // @@protoc_insertion_point(field:io.prometheus.client.Metric.gauge)
    pub gauge: ::protobuf::MessageField<Gauge>,
    // @@protoc_insertion_point(field:io.prometheus.client.Metric.counter)
    pub counter: ::protobuf::MessageField<Counter>,
    // @@protoc_insertion_point(field:io.prometheus.client.Metric.summary)
    pub summary: ::protobuf::MessageField<Summary>,
    // @@protoc_insertion_point(field:io.prometheus.client.Metric.untyped)
    pub untyped: ::protobuf::MessageField<Untyped>,
    // @@protoc_insertion_point(field:io.prometheus.client.Metric.histogram)
    pub histogram: ::protobuf::MessageField<Histogram>,
    // @@protoc_insertion_point(field:io.prometheus.client.Metric.timestamp_ms)
    pub timestamp_ms: i64,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.Metric.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metric {
    fn default() -> &'a Metric {
        <Metric as ::protobuf::Message>::default_instance()
    }
}

impl Metric {
    pub fn new() -> Metric {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "label",
            |m: &Metric| { &m.label },
            |m: &mut Metric| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Gauge>(
            "gauge",
            |m: &Metric| { &m.gauge },
            |m: &mut Metric| { &mut m.gauge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Counter>(
            "counter",
            |m: &Metric| { &m.counter },
            |m: &mut Metric| { &mut m.counter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Summary>(
            "summary",
            |m: &Metric| { &m.summary },
            |m: &mut Metric| { &mut m.summary },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Untyped>(
            "untyped",
            |m: &Metric| { &m.untyped },
            |m: &mut Metric| { &mut m.untyped },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Histogram>(
            "histogram",
            |m: &Metric| { &m.histogram },
            |m: &mut Metric| { &mut m.histogram },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp_ms",
            |m: &Metric| { &m.timestamp_ms },
            |m: &mut Metric| { &mut m.timestamp_ms },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Metric>(
            "Metric",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Metric {
    const NAME: &'static str = "Metric";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.label.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gauge)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.counter)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.summary)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.untyped)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.histogram)?;
                },
                48 => {
                    self.timestamp_ms = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.label {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.gauge.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.counter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.summary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.untyped.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.histogram.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.timestamp_ms != 0 {
            my_size += ::protobuf::rt::int64_size(6, self.timestamp_ms);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.label {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.gauge.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.counter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.summary.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.untyped.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.histogram.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.timestamp_ms != 0 {
            os.write_int64(6, self.timestamp_ms)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Metric {
        Metric::new()
    }

    fn clear(&mut self) {
        self.label.clear();
        self.gauge.clear();
        self.counter.clear();
        self.summary.clear();
        self.untyped.clear();
        self.histogram.clear();
        self.timestamp_ms = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metric {
        static instance: Metric = Metric {
            label: ::std::vec::Vec::new(),
            gauge: ::protobuf::MessageField::none(),
            counter: ::protobuf::MessageField::none(),
            summary: ::protobuf::MessageField::none(),
            untyped: ::protobuf::MessageField::none(),
            histogram: ::protobuf::MessageField::none(),
            timestamp_ms: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Metric {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metric").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metric {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:io.prometheus.client.MetricFamily)
pub struct MetricFamily {
    // message fields
    // @@protoc_insertion_point(field:io.prometheus.client.MetricFamily.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:io.prometheus.client.MetricFamily.help)
    pub help: ::std::string::String,
    // @@protoc_insertion_point(field:io.prometheus.client.MetricFamily.type)
    pub type_: ::protobuf::EnumOrUnknown<MetricType>,
    // @@protoc_insertion_point(field:io.prometheus.client.MetricFamily.metric)
    pub metric: ::std::vec::Vec<Metric>,
    // special fields
    // @@protoc_insertion_point(special_field:io.prometheus.client.MetricFamily.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricFamily {
    fn default() -> &'a MetricFamily {
        <MetricFamily as ::protobuf::Message>::default_instance()
    }
}

impl MetricFamily {
    pub fn new() -> MetricFamily {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &MetricFamily| { &m.name },
            |m: &mut MetricFamily| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "help",
            |m: &MetricFamily| { &m.help },
            |m: &mut MetricFamily| { &mut m.help },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &MetricFamily| { &m.type_ },
            |m: &mut MetricFamily| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metric",
            |m: &MetricFamily| { &m.metric },
            |m: &mut MetricFamily| { &mut m.metric },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricFamily>(
            "MetricFamily",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricFamily {
    const NAME: &'static str = "MetricFamily";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.help = is.read_string()?;
                },
                24 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.metric.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.help.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.help);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(MetricType::COUNTER) {
            my_size += ::protobuf::rt::int32_size(3, self.type_.value());
        }
        for value in &self.metric {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.help.is_empty() {
            os.write_string(2, &self.help)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(MetricType::COUNTER) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        for v in &self.metric {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricFamily {
        MetricFamily::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.help.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(MetricType::COUNTER);
        self.metric.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricFamily {
        static instance: MetricFamily = MetricFamily {
            name: ::std::string::String::new(),
            help: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            metric: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricFamily {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricFamily").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricFamily {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricFamily {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:io.prometheus.client.MetricType)
pub enum MetricType {
    // @@protoc_insertion_point(enum_value:io.prometheus.client.MetricType.COUNTER)
    COUNTER = 0,
    // @@protoc_insertion_point(enum_value:io.prometheus.client.MetricType.GAUGE)
    GAUGE = 1,
    // @@protoc_insertion_point(enum_value:io.prometheus.client.MetricType.SUMMARY)
    SUMMARY = 2,
    // @@protoc_insertion_point(enum_value:io.prometheus.client.MetricType.UNTYPED)
    UNTYPED = 3,
    // @@protoc_insertion_point(enum_value:io.prometheus.client.MetricType.HISTOGRAM)
    HISTOGRAM = 4,
    // @@protoc_insertion_point(enum_value:io.prometheus.client.MetricType.GAUGE_HISTOGRAM)
    GAUGE_HISTOGRAM = 5,
}

impl ::protobuf::Enum for MetricType {
    const NAME: &'static str = "MetricType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricType> {
        match value {
            0 => ::std::option::Option::Some(MetricType::COUNTER),
            1 => ::std::option::Option::Some(MetricType::GAUGE),
            2 => ::std::option::Option::Some(MetricType::SUMMARY),
            3 => ::std::option::Option::Some(MetricType::UNTYPED),
            4 => ::std::option::Option::Some(MetricType::HISTOGRAM),
            5 => ::std::option::Option::Some(MetricType::GAUGE_HISTOGRAM),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MetricType] = &[
        MetricType::COUNTER,
        MetricType::GAUGE,
        MetricType::SUMMARY,
        MetricType::UNTYPED,
        MetricType::HISTOGRAM,
        MetricType::GAUGE_HISTOGRAM,
    ];
}

impl ::protobuf::EnumFull for MetricType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MetricType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MetricType {
    fn default() -> Self {
        MetricType::COUNTER
    }
}

impl MetricType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MetricType>("MetricType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmetrics.proto\x12\x14io.prometheus.client\x1a\ngogo.proto\x1a\x1fgoo\
    gle/protobuf/timestamp.proto\"5\n\tLabelPair\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"\
    \x1d\n\x05Gauge\x12\x14\n\x05value\x18\x01\x20\x01(\x01R\x05value\"[\n\
    \x07Counter\x12\x14\n\x05value\x18\x01\x20\x01(\x01R\x05value\x12:\n\x08\
    exemplar\x18\x02\x20\x01(\x0b2\x1e.io.prometheus.client.ExemplarR\x08exe\
    mplar\"<\n\x08Quantile\x12\x1a\n\x08quantile\x18\x01\x20\x01(\x01R\x08qu\
    antile\x12\x14\n\x05value\x18\x02\x20\x01(\x01R\x05value\"\x8d\x01\n\x07\
    Summary\x12!\n\x0csample_count\x18\x01\x20\x01(\x04R\x0bsampleCount\x12\
    \x1d\n\nsample_sum\x18\x02\x20\x01(\x01R\tsampleSum\x12@\n\x08quantile\
    \x18\x03\x20\x03(\x0b2\x1e.io.prometheus.client.QuantileR\x08quantileB\
    \x04\xc8\xde\x1f\0\"\x1f\n\x07Untyped\x12\x14\n\x05value\x18\x01\x20\x01\
    (\x01R\x05value\"\xf5\x04\n\tHistogram\x12!\n\x0csample_count\x18\x01\
    \x20\x01(\x04R\x0bsampleCount\x12,\n\x12sample_count_float\x18\x04\x20\
    \x01(\x01R\x10sampleCountFloat\x12\x1d\n\nsample_sum\x18\x02\x20\x01(\
    \x01R\tsampleSum\x12:\n\x06bucket\x18\x03\x20\x03(\x0b2\x1c.io.prometheu\
    s.client.BucketR\x06bucketB\x04\xc8\xde\x1f\0\x12\x16\n\x06schema\x18\
    \x05\x20\x01(\x11R\x06schema\x12%\n\x0ezero_threshold\x18\x06\x20\x01(\
    \x01R\rzeroThreshold\x12\x1d\n\nzero_count\x18\x07\x20\x01(\x04R\tzeroCo\
    unt\x12(\n\x10zero_count_float\x18\x08\x20\x01(\x01R\x0ezeroCountFloat\
    \x12K\n\rnegative_span\x18\t\x20\x03(\x0b2\x20.io.prometheus.client.Buck\
    etSpanR\x0cnegativeSpanB\x04\xc8\xde\x1f\0\x12%\n\x0enegative_delta\x18\
    \n\x20\x03(\x12R\rnegativeDelta\x12%\n\x0enegative_count\x18\x0b\x20\x03\
    (\x01R\rnegativeCount\x12K\n\rpositive_span\x18\x0c\x20\x03(\x0b2\x20.io\
    .prometheus.client.BucketSpanR\x0cpositiveSpanB\x04\xc8\xde\x1f\0\x12%\n\
    \x0epositive_delta\x18\r\x20\x03(\x12R\rpositiveDelta\x12%\n\x0epositive\
    _count\x18\x0e\x20\x03(\x01R\rpositiveCount\"\xc6\x01\n\x06Bucket\x12)\n\
    \x10cumulative_count\x18\x01\x20\x01(\x04R\x0fcumulativeCount\x124\n\x16\
    cumulative_count_float\x18\x04\x20\x01(\x01R\x14cumulativeCountFloat\x12\
    \x1f\n\x0bupper_bound\x18\x02\x20\x01(\x01R\nupperBound\x12:\n\x08exempl\
    ar\x18\x03\x20\x01(\x0b2\x1e.io.prometheus.client.ExemplarR\x08exemplar\
    \"<\n\nBucketSpan\x12\x16\n\x06offset\x18\x01\x20\x01(\x11R\x06offset\
    \x12\x16\n\x06length\x18\x02\x20\x01(\rR\x06length\"\x97\x01\n\x08Exempl\
    ar\x12;\n\x05label\x18\x01\x20\x03(\x0b2\x1f.io.prometheus.client.LabelP\
    airR\x05labelB\x04\xc8\xde\x1f\0\x12\x14\n\x05value\x18\x02\x20\x01(\x01\
    R\x05value\x128\n\ttimestamp\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.T\
    imestampR\ttimestamp\"\x85\x03\n\x06Metric\x12;\n\x05label\x18\x01\x20\
    \x03(\x0b2\x1f.io.prometheus.client.LabelPairR\x05labelB\x04\xc8\xde\x1f\
    \0\x121\n\x05gauge\x18\x02\x20\x01(\x0b2\x1b.io.prometheus.client.GaugeR\
    \x05gauge\x127\n\x07counter\x18\x03\x20\x01(\x0b2\x1d.io.prometheus.clie\
    nt.CounterR\x07counter\x127\n\x07summary\x18\x04\x20\x01(\x0b2\x1d.io.pr\
    ometheus.client.SummaryR\x07summary\x127\n\x07untyped\x18\x05\x20\x01(\
    \x0b2\x1d.io.prometheus.client.UntypedR\x07untyped\x12=\n\thistogram\x18\
    \x07\x20\x01(\x0b2\x1f.io.prometheus.client.HistogramR\thistogram\x12!\n\
    \x0ctimestamp_ms\x18\x06\x20\x01(\x03R\x0btimestampMs\"\xa8\x01\n\x0cMet\
    ricFamily\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x12\n\x04hel\
    p\x18\x02\x20\x01(\tR\x04help\x124\n\x04type\x18\x03\x20\x01(\x0e2\x20.i\
    o.prometheus.client.MetricTypeR\x04type\x12:\n\x06metric\x18\x04\x20\x03\
    (\x0b2\x1c.io.prometheus.client.MetricR\x06metricB\x04\xc8\xde\x1f\0*b\n\
    \nMetricType\x12\x0b\n\x07COUNTER\x10\0\x12\t\n\x05GAUGE\x10\x01\x12\x0b\
    \n\x07SUMMARY\x10\x02\x12\x0b\n\x07UNTYPED\x10\x03\x12\r\n\tHISTOGRAM\
    \x10\x04\x12\x13\n\x0fGAUGE_HISTOGRAM\x10\x05B\x16Z\x14io_prometheus_cli\
    entb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::gogo::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(LabelPair::generated_message_descriptor_data());
            messages.push(Gauge::generated_message_descriptor_data());
            messages.push(Counter::generated_message_descriptor_data());
            messages.push(Quantile::generated_message_descriptor_data());
            messages.push(Summary::generated_message_descriptor_data());
            messages.push(Untyped::generated_message_descriptor_data());
            messages.push(Histogram::generated_message_descriptor_data());
            messages.push(Bucket::generated_message_descriptor_data());
            messages.push(BucketSpan::generated_message_descriptor_data());
            messages.push(Exemplar::generated_message_descriptor_data());
            messages.push(Metric::generated_message_descriptor_data());
            messages.push(MetricFamily::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(MetricType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
